#pragma kernel CSMain

#define THREAD_GROUP_SIZE_X 128
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1

#include "RayTracing.cginc"

// Buffers
StructuredBuffer<ShapeData> _ShapeBuffer;
RWStructuredBuffer<TransformData> _TransformData;

cbuffer CB {
    int _ShapeNumber;
};

// Kernels
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void CSMain (
in uint3 dispatchThreadID : SV_DispatchThreadID, // DispatchThreadID  = dot(GroupID, numthreads) + GroupThreadId;
in uint  groupIndex       : SV_GroupIndex, // uint GroupIndex = unique index of a thread inside a group
in uint3 groupID          : SV_GroupID, // GroupID = index for each dimension inside a ThreadGroupCount
in uint3 groupThreadID    : SV_GroupThreadID // uint3 GroupThreadId = indices for each dimension inside a group of the current thread
) {
    uint dataIndex = dispatchThreadID.x;

    if (dataIndex < _ShapeNumber) {
        float3 position = _ShapeBuffer[dataIndex].position;
        float3 rotation = _ShapeBuffer[dataIndex].rotation;
        float3 scale = _ShapeBuffer[dataIndex].scale;

        float4x4 xRotationMatrix = rotationMatrix(float3(1, 0, 0), radians(rotation.x));
        float4x4 yRotationMatrix = rotationMatrix(float3(0, 1, 0), radians(rotation.y));
        float4x4 zRotationMatrix = rotationMatrix(float3(0, 0, 1), radians(rotation.z));
        float4x4 rotMatrix = mul(yRotationMatrix, mul(xRotationMatrix, zRotationMatrix));

        float4x4 scaleMatrix = {
            scale.x, 0, 0, 0,
            0, scale.y, 0, 0,
            0, 0, scale.z, 0,
            0, 0, 0, 1
        };

        float4x4 translation = {
            1, 0, 0, position.x,
            0, 1, 0, position.y,
            0, 0, 1, position.z,
            0, 0, 0, 1
        };

        float4x4 objectToWorld = mul(translation, mul(rotMatrix, scaleMatrix));
        float4x4 worldToObject = inverse(objectToWorld);

        TransformData transformData;

        transformData.row0 = objectToWorld[0];
        transformData.row1 = objectToWorld[1];
        transformData.row2 = objectToWorld[2];
        transformData.row3 = worldToObject[0];
        transformData.row4 = worldToObject[1];
        transformData.row5 = worldToObject[2];

        _TransformData[dataIndex] = transformData;
    }
}