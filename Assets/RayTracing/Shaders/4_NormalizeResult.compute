#pragma kernel CSMain

#define THREAD_GROUP_SIZE_X 128
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1

#include "RayTracing.cginc"

// Buffers
RWTexture2D<float4> _Result;
RWStructuredBuffer<Ray> _RayBuffer;
RWStructuredBuffer<float4> _SampleBuffer;

// Kernels
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void CSMain (
in uint3 dispatchThreadID : SV_DispatchThreadID, // DispatchThreadID  = dot(GroupID, numthreads) + GroupThreadId;
in uint  groupIndex       : SV_GroupIndex, // uint GroupIndex = unique index of a thread inside a group
in uint3 groupID          : SV_GroupID, // GroupID = index for each dimension inside a ThreadGroupCount
in uint3 groupThreadID    : SV_GroupThreadID // uint3 GroupThreadId = indices for each dimension inside a group of the current thread
) {
    uint width, height;
    _Result.GetDimensions(width, height);

    uint rayNumber, stride;
    _RayBuffer.GetDimensions(rayNumber, stride);

    uint firstIndex = dispatchThreadID.x + dispatchThreadID.y * width;
    uint totalPixels = width * height;

    float4 sampleColor = _SampleBuffer[firstIndex];
    for (uint rayIndex = firstIndex; rayIndex < rayNumber; rayIndex += totalPixels) {
        sampleColor.rgb += _RayBuffer[rayIndex].color + _RayBuffer[rayIndex].emission;
        sampleColor.a += 1;
    }
    _SampleBuffer[firstIndex] = sampleColor;

    float3 color = 0;
    if (sampleColor.a > 0) {
        color = sampleColor.rgb / sampleColor.a;
    }

    _Result[dispatchThreadID.xy] = float4(color, 1);
}
