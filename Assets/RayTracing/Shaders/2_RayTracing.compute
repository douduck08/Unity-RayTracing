#pragma kernel CSMain

#define THREAD_GROUP_SIZE_X 128
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1

#define MIN_RAY_DISTANCE 0.001
#define MAX_RAY_DISTANCE 1000.0
#define MAX_RAY_STEP 10

#include "RayTracing.cginc"

// Buffers
RWTexture2D<float4> _Result;
RWStructuredBuffer<Ray> _RayBuffer;
StructuredBuffer<SphereData> _SphereBuffer;
StructuredBuffer<PlaneData> _PlaneBuffer;
StructuredBuffer<BoxData> _BoxBuffer;

cbuffer CB {
    float4 _SkyColor;
    float4 _SunColor;
    float4 _SunDirection;
    int _SphereNumber;
    int _PlaneNumber;
    int _BoxNumber;
};

// Functions
bool RayCast(Ray ray, out RayHit hit) {
    hit = (RayHit)0;
    hit.t = MAX_RAY_DISTANCE;

    bool hit_something = false;
    int i = 0;
    for (i = 0; i < _SphereNumber; i++) {
        if (ray.HitSphere(_SphereBuffer[i], MIN_RAY_DISTANCE, hit.t, /*out*/hit)) hit_something = true;
    }
    for (i = 0; i < _PlaneNumber; i++) {
        if (ray.HitPlane(_PlaneBuffer[i], MIN_RAY_DISTANCE, hit.t, /*out*/hit)) hit_something = true;
    }
    for (i = 0; i < _BoxNumber; i++) {
        if (ray.HitBox(_BoxBuffer[i], MIN_RAY_DISTANCE, hit.t, /*out*/hit)) hit_something = true;
    }
    return hit_something;
}

float3 SampleEnvColor (float3 direction) {
    // float NdotL = max(dot(-direction, _SunDirection), 0);
    // return _SkyColor.rgb + _SunColor.rgb * NdotL;
    return _SkyColor.rgb;
}

bool SampleColor (Ray ray, out Ray scattered_ray) {
    RayHit hit;
    bool hit_something = RayCast(ray, /*out*/hit);

    if (hit_something) {
        hit_something = Scatter(ray, hit, /*out*/scattered_ray);
        // ** debug **
        // hit_something = false;
        // scattered_ray = (Ray)0;
        // scattered_ray.color = hit.normal * 0.5 + 0.5;
        // scattered_ray.color = hit.position;
        // ** debug **
    }
    else {
        scattered_ray = RedirectRay (0, 0, ray.color * SampleEnvColor(ray.direction), ray);
        // scattered_ray.color = ray.color * SampleEnvColor(ray.direction);
    }
    return hit_something;
}

// Kernels
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void CSMain (
in uint3 dispatchThreadID : SV_DispatchThreadID, // DispatchThreadID  = dot(GroupID, numthreads) + GroupThreadId;
in uint  groupIndex       : SV_GroupIndex, // uint GroupIndex = unique index of a thread inside a group
in uint3 groupID          : SV_GroupID, // GroupID = index for each dimension inside a ThreadGroupCount
in uint3 groupThreadID    : SV_GroupThreadID // uint3 GroupThreadId = indices for each dimension inside a group of the current thread
) {
    uint width, height;
    _Result.GetDimensions(width, height);

    uint rayIndex = GetIndex(dispatchThreadID, width, height);

    Ray ray = _RayBuffer[rayIndex];
    ray.color = 1;
    int depth;
    bool hit_something = true;
    while (hit_something && depth < MAX_RAY_STEP) {
        hit_something = SampleColor (ray, /*out*/ray);
        depth += 1;
    }

    if (depth >= MAX_RAY_STEP) {
        // over the max bounces
        ray.color = 0;
    }

    _RayBuffer[rayIndex] = ray;
}
